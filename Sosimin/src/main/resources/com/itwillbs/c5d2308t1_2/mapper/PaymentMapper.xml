<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.itwillbs.c5d2308t1_2.mapper.PaymentMapper">
	<!-- 토큰 아이디조회 -->
	<select id="selectAccessToken" resultType="map">
		SELECT *
		FROM Token
		WHERE member_id = #{member_id}
	</select>

	<!-- 엑세스 토큰 저장 - INSERT -->
	<insert id="insertAccessToken">
		INSERT INTO Token
		VALUES (
			null
			, #{member_id}
			, #{token.access_token} 
			, #{token.refresh_token} 
			, #{token.user_seq_no} 
			, null
			, #{token.admin_access_token}
		)
	</insert>

	<!-- 엑세스 토큰 업데이트 - UPDATE -->
	<update id="updateAccessToken">
		UPDATE Token
		SET 
			access_token = #{token.access_token}
			, refresh_token = #{token.refresh_token}
			, user_seq_no = #{token.user_seq_no}
			, admin_access_token = #{token.admin_access_token}
		WHERE member_id = #{member_id}
	</update>
	
	<!-- 페이 아이디조회 -->
	<select id="selectPay" resultType="int">
		SELECT count(*)
		FROM Pay
		WHERE member_id = #{member_id}
	</select>
	
	<!-- 페이 가입(계좌등록) - INSERT -->
	<insert id="insertPay">
		<selectKey keyProperty="pay_id" resultType="INT" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO Pay
		VALUES (
			null
			, #{member_id}
			, #{user_name}
			, #{fintech_use_num}
			, #{bank_name}
			, #{account_num_masked}
			, 3000
			, now()
			, 0
			, null
			, #{pay_password}
		)
	</insert>
	
	<!-- 가입축하금 지급 기록 -->
	<insert id="insertPayHistoryFirst">
		INSERT INTO PayHistory
		VALUES (
			null
			, #{pay_id}
			, 3000
			, 3000
			, 1
			, '가입축하금'
			, now()
			, null
		)
	</insert>
	
	<!-- 페이 수정(계좌수정) - UPDATE -->
	<update id="updatePay">
		UPDATE Pay
		SET
			user_name = #{user_name}
			, fintech_use_num = #{fintech_use_num}
			, bank_name = #{bank_name}
			, account_num_masked = #{account_num_masked}
			, pay_password = #{pay_password}
			, pay_status = 0
			, pay_withdraw_date = null
		WHERE member_id = #{member_id}
	</update>
	
	<!-- 페이 가입 정보 조회 -->
	<select id="selectPayInfo" resultType="map">
		SELECT *
		FROM Pay
		WHERE member_id = #{member_id}
			AND pay_status = 0
	</select>
	
	<!-- 페이 내역 불러오기 -->
	<select id="selectPayHistory" resultType="map">
		SELECT *
		FROM PayHistoryList
		WHERE pay_id = #{pay_id}
		<if test="pay_history_type != null and !pay_history_type.equals('')">
			AND pay_history_type = #{pay_history_type}
		</if>
		<if test="start_date != null and !start_date.equals('') and end_date != null and !end_date.equals('')">
			AND DATE(pay_history_date) BETWEEN #{start_date} AND #{end_date}
		</if>
		ORDER BY pay_history_date DESC
		<if test="startRow != null and !startRow.equals('') and listLimit != null and !listLimit.equals('')">
			LIMIT #{startRow}, #{listLimit}
		</if>
	</select>
	
	<!-- 페이 내역 개수 세기(페이징) -->
	<select id="selectPayHistoryCount" resultType="int">
		SELECT COUNT(*)
		FROM PayHistory
		WHERE pay_id = #{pay_id}
		<if test="pay_history_type != null and !pay_history_type.equals('')">
			AND pay_history_type = #{pay_history_type}
		</if>
		<if test="start_date != null and !start_date.equals('') and end_date != null and !end_date.equals('')">
			AND DATE(pay_history_date) BETWEEN #{start_date} AND #{end_date}
		</if>
	</select>
	
	<!-- 엑세스토큰 삭제(탈퇴처리) -->
	<delete id="deleteToken">
		DELETE FROM Token
		WHERE member_id = #{member_id}
	</delete>
	
	<!-- 페이 정보 변경(탈퇴처리) -->
	<update id="updatePayStatus">
		UPDATE Pay
		SET 
			pay_status = 1
			, user_name = ''
			, fintech_use_num = ''
			, bank_name = ''
			, account_num_masked = ''
			, pay_balance = 0
			, pay_withdraw_date = now()
			, pay_password = ''
		WHERE pay_id = #{pay_id}
	</update>
	
	<!-- 페이사용내역 삭제(탈퇴처리)  -->
	<delete id="deletePayHistory">
		DELETE FROM PayHistory
		WHERE pay_id = #{pay_id}
	</delete>
	
	<!-- 페이 잔액 충전 -->
	<update id="updatePayBalance">
		UPDATE Pay
		SET 
		<choose>
			<when test="pay_history_type == 1">
				pay_balance = pay_balance + CAST(#{tran_amt} AS SIGNED)
			</when>
			<when test="pay_history_type == 2">
				pay_balance = pay_balance - CAST(#{tran_amt} AS SIGNED)
			</when>
			<when test="pay_history_type == 3">
				pay_balance = pay_balance - CAST(#{order_amount} AS SIGNED)
			</when>
			<when test="pay_history_type == 4">
				pay_balance = pay_balance + CAST(#{payment_amount} AS SIGNED)
			</when>
			<otherwise>
				pay_balance = pay_balance
			</otherwise>
		</choose>
		WHERE fintech_use_num = #{fintech_use_num}
		<if test="pay_history_type == 1 or pay_history_type == 2">
			AND member_id = #{member_id}
		</if>
		<if test="pay_history_type == 3">
			AND member_id = #{product_buyer}
		</if>
		<if test="pay_history_type == 4">
			AND member_id = #{product_seller}
		</if>
	</update>
	
	<!-- 페이 충전/환급 내역 -->
	<insert id="insertPayHistory">
		<selectKey keyProperty="pay_history_id" resultType="INT" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO PayHistory
		VALUE (
			null
			, #{pay_id}
			, #{tran_amt}
			<choose>
				<when test="pay_history_type == 1">
					, #{pay_balance} + CAST(#{tran_amt} AS SIGNED)
				</when>
				<when test="pay_history_type == 2">
					, #{pay_balance} - CAST(#{tran_amt} AS SIGNED)
				</when>
				<otherwise>
					, #{pay_balance}
				</otherwise>
			</choose>
			, #{pay_history_type}
			, #{pay_history_message}
			, now()
			, #{bank_tran_id}
		)
	</insert>
	
	<!-- 약정계좌 이용 내역 -->
	<insert id="insertSosiminAccount">
		INSERT INTO SosiminAccount
		VALUE (
			null
			<choose>
				<when test="pay_history_type == 1">
					, account_balance + CAST(#{tran_amt} AS SIGNED)
				</when>
				<when test="pay_history_type == 2">
					, account_balance - CAST(#{tran_amt} AS SIGNED)
				</when>
			</choose>
			, #{pay_history_id}
		)
	</insert>
	

	<!-- 출금을 위해 관리자 토큰 조회(oob) -->
	<select id="selectAdminAccessToken" resultType="string">
		SELECT admin_access_token
		FROM Token
		WHERE member_id = 'admin'
	</select>
	
	<!-- 거래고유번호 중복 확인 -->
	<select id="selectTranId" resultType="int">
		SELECT count(*)
		FROM PayHistory
		WHERE bank_tran_id = #{bank_tran_id}
	</select>
	
	<!-- 구매하려는 상품 정보 조회 -->
	<select id="selectProductInfo" resultType="map">
		SELECT *
		FROM Product
		WHERE product_id = #{product_id}
	</select>
	
	<!-- 구매 기록이 있는지 체크 -->
	<select id="selectOrderCheck" resultType="int">
		SELECT COUNT(*)
		FROM Orders
		WHERE product_buyer = #{product_buyer}
			AND product_id = #{product_id}
	</select>
	
	<!-- 구매 기록 생성 -->
	<insert id="insertOrder">
		INSERT INTO Orders
		VALUE (
			null
			, #{product_id}
			, 1 -- 수락하면 일단 현금거래로 세팅
			, #{product_buyer}
			, null
			, null
			, null
			, 0
		)
	</insert>

	<!-- 상품 거래 상태를 거래중(1)으로 변경 -->
	<update id="updateTradeStatus1">
		UPDATE Product
		SET trade_status = 1
		WHERE product_id = #{product_id}
	</update>

	<!-- 거래 내역 조회하여 구매자 대조 -->
	<select id="selectOrderInfo" resultType="map">
		select *
		From OrderList
		WHERE product_id = #{product_id}
	</select>
	
	<!-- 페이 사용 내역 -->
	<insert id="insertbuyHistory">
		<selectKey keyProperty="buyer_pay_history_id" resultType="INT" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO PayHistory
		VALUE (
			null
			, #{pay_id}
			, #{order_amount}
			, #{pay_balance} - CAST(#{order_amount} AS SIGNED)
			, #{pay_history_type}
			, #{pay_history_message}
			, now()
			, null
		)
	</insert>
	
	<!-- 구매 기록 저장 -->
	<insert id="updateOrderBuyer">
		UPDATE Orders
		SET
			order_type = 0 -- 페이거래 번호로 변경
			, buyer_pay_history_id = #{buyer_pay_history_id}
		WHERE product_buyer = #{product_buyer}
			AND product_id = #{product_id}
	</insert>
	
	<!-- 상품 거래 상태를 거래완료(2)으로 변경 -->
	<update id="updateTradeStatus2">
		UPDATE Product
		SET trade_status = 2
		WHERE product_id = #{product_id}
	</update>
	
	<!-- 상품 결제 상태를 거래완료(1)으로 변경 -->
	<update id="updateOrderStatus">
		UPDATE Orders
		SET order_type = 1
			, order_date = now()
		WHERE product_buyer = #{product_buyer}
			AND product_id = #{product_id}
	</update>
	
	<!-- 페이 수익 내역 -->
	<insert id="insertsellHistory">
		<selectKey keyProperty="seller_pay_history_id" resultType="INT" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO PayHistory
		VALUE (
			null
			, #{seller_pay_id}
			, #{payment_amount}
			, #{pay_balance} + CAST(#{payment_amount} AS SIGNED)
			, #{pay_history_type}
			, #{pay_history_message}
			, now()
			, null
		)
	</insert>
	
	<!-- 구매 기록 저장 -->
	<insert id="updateOrderSeller">
		UPDATE Orders
		SET
			order_status = 1 -- 거래완료 상태로 변경
			, seller_pay_history_id = #{seller_pay_history_id}
			, order_date = now()
		WHERE product_buyer = #{product_buyer}
			AND product_id = #{product_id}
	</insert>
	
	<!-- 상품 거래 상태를 거래대기(0)로 변경 -->
	<update id="updateTradeStatus0">
		UPDATE Product
		SET trade_status = 0
		WHERE product_id = #{product_id}
	</update>
	
	<delete id="deleteOrders">
		DELETE FROM Orders
		WHERE product_buyer = #{product_buyer}
			AND product_id = #{product_id}
	</delete>
	
	
	
	<!-- ================ 관리자페이지 ====================== -->	
	
	<!-- 페이 관리 페이지 -->
	<select id="selectPayListAll" resultType="map">
		SELECT *
		FROM Pay
	</select>
	
	<!-- 페이 관리 상세 페이지 -->
	<select id="selectPayList" resultType="map">
		SELECT *
		FROM Pay
		WHERE pay_id = #{pay_id}
	</select>
	
	<!-- 페이 정보 수정 -->
	<update id="updatePayInfo">
		UPDATE Pay
		<trim prefix="SET" suffixOverrides=",">
			<if test="pay_balance != null and !pay_balance.equals('')">
				pay_balance = #{pay_balance},
			</if>
			<if test="pay_status != null and !pay_status.equals('')">
				pay_status = #{pay_status},
			</if>
			<if test="pay_password != null and !pay_password.equals('')">
				pay_password = #{pay_password}
			</if>
		</trim>
		WHERE pay_id = #{pay_id}
	</update>
	
	<!-- 페이 금액 변경 시 변경 정보 저장 -->
	<insert id="insertPayHistory2">
		<selectKey keyProperty="existing_balance" resultType="INT" order="BEFORE">
			SELECT pay_balance
			FROM Pay
			WHERE pay_id = #{pay_id}
		</selectKey>
		INSERT INTO PayHistory
		VALUE (
			null
			, #{pay_id}
			, CAST(#{pay_balance} AS SIGNED) - CAST(#{existing_balance} AS SIGNED)
			, #{pay_balance}
			, #{pay_history_type}
			, #{pay_history_message}
			, now()
			, null
		)
	</insert>
	
	<!-- 충전/환급 페이지 -->
	<select id="selectPayChargeRefund" resultType="map">
		SELECT *
		FROM PayHistoryList
		WHERE pay_history_type = 1
			OR pay_history_type = 2
		ORDER BY pay_history_id DESC
	</select>
	
	<!-- 사용/수익 페이지 -->
	<select id="selectPaySpentRevenue" resultType="map">
		SELECT *
		FROM SpantRevenue
		ORDER BY pay_history_id DESC;
	</select>
	
	<!-- 거래 내역 페이지 -->
	<select id="selectOrderList" resultType="map">
		SELECT *
		FROM OrderList
		ORDER BY order_id DESC
	</select>
	
	<!-- 약정계좌내역 불러오기 -->
	<select id="selectSosiminAccount" resultType="map">
		SELECT *
		FROM SosiminAccountView
		ORDER BY account_history_id DESC
	</select>
	
	<delete id="deleteOrderList">
		DELETE FROM Orders
		WHERE order_id = ${order_id}
	</delete>
</mapper>