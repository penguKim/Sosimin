<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.itwillbs.c5d2308t1_2.mapper.MemberMapper">

	<!-- ==================================== 회원가입/로그인 ===================================== -->
	<!-- town_id 조회 SELECT -->
	<select id="getlocation" resultType="int">
		SELECT town_id
		FROM locationView
		WHERE location = #{member_address}
	</select>
	<!--  회원가입 INSERT  -->
	<insert id="insertMember">
		INSERT INTO Member
		VALUES (
			#{member_id}
			, #{member_name}
			, #{member_email}
			, #{member_birth}
			, #{member_nickname}
			, #{member_phone}
			, 1 -- 회원 상태
			, #{member_password}
			, "" -- 프로필사진 기본값 ""
			, "" -- 소개글 기본값 ""
			, null -- 탈퇴시간 null
			, 1 -- 문자인증 여부(가입 성공 시 인증)
			, 1 -- 동네인증여부(가입 시 인증하므로 1)
			, now() -- 동네인증 시간 now()
			, 0 -- 페이 인증 여부 미인증(0)
			, 1 -- 회원레벨 1으로 시작
			, 0 -- 회원경험치 0으로 시작
			, #{town_id}
			, 0 -- 최종신고횟수 0
		
		)
	</insert>
	
	<!-- 회원정보조회 SELECT -->
	<select id="selectMember" resultType="member">
		SELECT *
		FROM Member
		WHERE Member.member_id = #{member_id} 
	</select>

	
	<!-- 중복 체크 위한 회원정보조회 SELECT -->
	<select id="selectDupMemberInfo" resultType="member">
		SELECT * 
		FROM Member
		WHERE member_id = #{member_id}
			OR member_nickname = #{member_nickname} 
			OR member_email = #{member_email}
			OR member_phone = #{member_phone}
		<!-- OR member_email = #{member_email} OR member_phone = #{member_phone} --> 
	</select>

	<!-- 아이디 찾기를 위한 회원정보 조회 SELECT -->
	<select id="selectMemberForId" resultType="member">
		SELECT *
		FROM Member
		WHERE member_name = #{member_name}
			AND member_email = #{member_email}
			AND member_birth = #{member_birth}
	</select>

	<!-- 비밀번호 찾기를 위한 회원정보 조회 SELECT -->
	<select id="selectMemberForPassword" resultType="member">
		SELECT *
		FROM Member
		WHERE member_id = #{member_id}
			AND member_name = #{member_name}
			AND member_phone = #{member_phone}
	</select>
	
	<!-- 비밀번호 찾기 후 비밀번호 수정 -->
	<insert id="updateMemberPassword">
		UPDATE Member
		SET member_password = #{newPassword}
		WHERE member_id = #{member.member_id}
	</insert>
	
		<!-- 위치 재인증을 위한 회원 정보 조회 SELECT -->
	<select id="selectMemberAuthRequired" resultType="member">
		SELECT *
		FROM Member
		WHERE member_status = 1
		AND member_neighbor_auth = 1
	</select>
	
	<!-- 동네 인증 상태 초기화 UPDATE -->
	<update id="updateMemberNeighborAuth">
		update Member
		set member_neighbor_auth = 0
		where member_id = #{member_id}
	</update>
	
	<!-- 탈퇴 회원 조회 SELECT -->
	<select id="selectWithdrawMember" resultType="member">
		SELECT *
		FROM Member
		WHERE member_status = 2
	</select>
	
	<!-- 탈퇴 회원 정보 삭제 DELETE -->
	<delete id="deleteMemberInfo">
		DELETE FROM Member
		WHERE member_id = #{member_id}
	</delete>
	
	
	<!-- ==================================== 마이페이지 ===================================== -->
	<!-- 페이징 처리를 위한 게시물 개수 조회 작업 -->
	<select id="selectMyPageListCount" resultType="int">
		SELECT COUNT(*)
			<choose>
				<when test="category == 1">
					<choose>
						<when test="filter == 0">
							FROM Product 
							WHERE member_id = #{sId}
						</when>
						<when test="filter == 1">
							FROM Product 
							WHERE member_id = #{sId}
							AND trade_status = 0
						</when>
						<when test="filter == 2">
							FROM ProductView
							WHERE member_id = #{sId}
							AND trade_status = 2
						</when>
					</choose>
					ORDER BY product_datetime DESC
				</when>
				<when test="category == 2">
					FROM ProductView
					JOIN Orders 
					ON Orders.order_id = ProductView.order_id
					WHERE ProductView.product_buyer = #{sId}
				</when>
				<when test="category == 3">
					FROM ProductLike
					JOIN Product
					ON ProductLike.product_id = Product.product_id
					WHERE ProductLike.member_id = #{sId}
					<choose>
						<when test="filter == 1">
							AND trade_status = 0
						</when>
						<when test="filter == 2">
							AND trade_status = 2
						</when>
					</choose>
				</when>
				<when test="category == 4">
					FROM Community WHERE community_writer = #{sId}
				</when>
				<when test="category == 5">
					FROM CommunityReply WHERE reply_writer = #{sId}
				</when>
			</choose>
	</select>
	
	<!-- 프로필 회원 정보 조회 SELECT -->
	<select id="selectMyProfileMember" resultType="member">
		SELECT *
		FROM Member
		WHERE member_id = #{sId} 
	</select>
	
	<!-- 상품판매 횟수 조회 SELECT -->
	<select id="selectCountProductSold" resultType="int">
		SELECT COUNT(*) 
		FROM OrderList
		WHERE product_buyer = #{sId};
	</select>
	
	<!-- 커뮤니티 글 개수 조회 SELECT -->
	<select id="selectCountCommunity" resultType="int">
		SELECT COUNT(*) 
		FROM Community
		WHERE community_writer = #{sId}
	</select>

	<!-- 커뮤니티 댓글 개수 조회 SELECT -->
	<select id="selectCountCommunityReply" resultType="int">
		SELECT COUNT(*) 
		FROM CommunityReply
		WHERE reply_writer = #{sId}
	</select>

	<!-- 커뮤니티 좋아요 개수 조회 SELECT -->
	<select id="selectCountCommunityLike" resultType="int">
		SELECT IFNULL(sum(clc.count), 0)
		FROM Community c
		LEFT JOIN CommunityLikeCount clc
		ON c.community_id = clc.community_num
		WHERE c.community_writer  = #{sId}
	</select>
	
	<!-- 받은 후기 카운트 -->
	<select id="selectReviewCount" resultType="hashmap">
		SELECT * 
		FROM ReviewCount
		WHERE target_member_id = #{sId};
	</select>
	
	<!-- 관심가져오기 -->
	<select id="selectMemberInterest" resultType="hashmap">
		SELECT *
		FROM ProductLike
		WHERE member_id = #{sId}
	</select>
	
	<!-- 한 페이지에 표시할 게시물 목록 조회 SELECT -->
	<select id="selectMyPageList" resultType="hashmap">
		SELECT *
			<choose>
				<when test="category == 1">
					<choose>
						<when test="filter == 0">
							FROM Product
							WHERE member_id = #{sId}
						</when>
						<when test="filter == 1">
							FROM Product 
							WHERE member_id = #{sId}
							AND trade_status = 0
						</when>
						<when test="filter == 2">
							FROM ProductView
							WHERE member_id = #{sId}
							AND trade_status = 2
						</when>
					</choose>
					ORDER BY product_datetime DESC
				</when>
				<when test="category == 2">
					FROM ProductView
					JOIN Orders ON Orders.order_id = ProductView.order_id
					WHERE ProductView.product_buyer = #{sId}
					ORDER BY product_datetime DESC
				</when>
				<when test="category == 3">
					FROM ProductLike 
					JOIN Product
					ON ProductLike.product_id = Product.product_id
					WHERE ProductLike.member_id = #{sId}
					<choose>
						<when test="filter == 1">
							AND trade_status = 0
						</when>
						<when test="filter == 2">
							AND trade_status = 2
						</when>
					</choose>
					ORDER BY product_datetime DESC
				</when>
				<when test="category == 4">
					FROM CommunityAllView WHERE community_writer = #{sId}
					ORDER BY community_datetime DESC
				</when>
				<when test="category == 5">
					FROM CommunityReply 
					JOIN Community 
					ON Community.community_id = CommunityReply.community_id
					WHERE reply_writer = #{sId}
					ORDER BY reply_datetime DESC
				</when>
			</choose>
			LIMIT #{page.startRow}, #{page.listLimit}
	</select>
	
	<!-- 모달 내정보수정 UPDATE -->
	<update id="updateMyInfo">
		UPDATE Member
		SET 
		member_profile = #{member_profile}
		, member_name = #{member_name}
		, member_birth = #{member_birth}
		, member_intro = #{member_intro}
		<if test="member_password != null and !member_password.equals('')">
			, member_password = #{member_password}
		</if>
		, member_nickname = #{member_nickname}
		, member_email = #{member_email}
		, member_phone = #{member_phone}
		, member_neighbor_auth = #{member_neighbor_auth}
		, town_id = #{town_id}
		<if test="member_status != null and member_status != ''">
			, member_status = #{member_status}
		</if>
		WHERE member_id = #{member_id}
	</update>	

	<!-- 관리자페이지 회원정보 목록 조회 SELECT -->
	<select id="selectAllMemberList" resultType="hashmap">
		SELECT *
		FROM Member
		LEFT OUTER JOIN Town
		ON Town.town_id = Member.town_id
	</select>
	
	<!-- 관리자페이지 회원 정보 수정을 위한 회원조회 SELECT -->
	<select id="selectSingleMember" resultType="hashmap">
		SELECT *
		FROM Member
		LEFT OUTER JOIN Town
		ON Town.town_id = Member.town_id
		WHERE member_id = #{member_id}
	</select>
	
	<!-- 상품 찜 등록, 삭제를 위한 조회 -->
	<select id="selectLike" resultType="int">
		SELECT product_like
		FROM ProductLike
		WHERE member_id = #{sId}
		AND product_id = #{product_id}
	</select>
	
	<!-- 상품 찜 삭제 -->
	<delete id="deleteLike">
		DELETE FROM ProductLike
		WHERE member_id = #{sId}
		AND product_id = #{product_id}
	</delete>
	
	<!-- 상품 찜 등록 -->
	<insert id="insertLike">
		insert into ProductLike
		Values (
			null
			, #{product_id}
			, #{sId}
		)
	</insert>
</mapper>